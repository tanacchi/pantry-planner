/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.tanacchi.pantry-planner.api.controller

import com.tanacchi.pantry-planner.api.model.Item
import com.tanacchi.pantry-planner.api.model.Model400ErrorMessage
import com.tanacchi.pantry-planner.api.model.Model404ErrorMessage
import com.tanacchi.pantry-planner.api.model.Model500ErrorMessage
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface ItemsApi {

    @Operation(
        tags = ["Item",],
        summary = "パントリーIDでアイテム一覧を取得します",
        operationId = "itemsByPantryPantryIdGet",
        description = """指定したパントリーIDに紐づくアイテムの一覧を取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "アイテム一覧の取得に成功しました", content = [Content(array = ArraySchema(schema = Schema(implementation = Item::class)))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/items/by-pantry/{pantryId}"],
            produces = ["application/json"]
    )
    fun itemsByPantryPantryIdGet(@Parameter(description = "パントリーID", required = true) @PathVariable("pantryId") pantryId: kotlin.Int): ResponseEntity<List<Item>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Item",],
        summary = "アイテム一覧を取得します",
        operationId = "itemsGet",
        description = """クエリパラメータで検索条件を指定してアイテムのリストを取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "アイテム一覧の取得に成功しました", content = [Content(array = ArraySchema(schema = Schema(implementation = Item::class)))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/items"],
            produces = ["application/json"]
    )
    fun itemsGet( @RequestParam(value = "name", required = false) name: kotlin.collections.List<kotlin.String>?, @RequestParam(value = "category", required = false) category: kotlin.collections.List<kotlin.String>?): ResponseEntity<List<Item>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Item",],
        summary = "指定IDのアイテムを削除します",
        operationId = "itemsIdDelete",
        description = """アイテムを削除します。""",
        responses = [
            ApiResponse(responseCode = "204", description = "アイテムの削除に成功しました"),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/items/{id}"],
            produces = ["application/json"]
    )
    fun itemsIdDelete(@Parameter(description = "アイテムID", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Item",],
        summary = "指定IDのアイテムを取得します",
        operationId = "itemsIdGet",
        description = """アイテムのプライマリキーであるIDを指定して取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "アイテムの取得に成功しました", content = [Content(schema = Schema(implementation = Item::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/items/{id}"],
            produces = ["application/json"]
    )
    fun itemsIdGet(@Parameter(description = "アイテムID", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<Item> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Item",],
        summary = "指定IDのアイテム情報を更新します",
        operationId = "itemsIdPut",
        description = """アイテムの情報を更新します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "アイテムの更新に成功しました", content = [Content(schema = Schema(implementation = Item::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/items/{id}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun itemsIdPut(@Parameter(description = "アイテムID", required = true) @PathVariable("id") id: kotlin.Int,@Parameter(description = "", required = true) @Valid @RequestBody item: Item): ResponseEntity<Item> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Item",],
        summary = "新しいアイテムを作成します",
        operationId = "itemsPost",
        description = """createdAt, updatedAt はリクエストボディに含めずに作成してください。""",
        responses = [
            ApiResponse(responseCode = "201", description = "アイテムの作成に成功しました", content = [Content(schema = Schema(implementation = Item::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/items"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun itemsPost(@Parameter(description = "", required = true) @Valid @RequestBody item: Item): ResponseEntity<Item> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
