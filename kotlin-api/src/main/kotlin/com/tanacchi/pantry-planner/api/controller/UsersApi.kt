/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.tanacchi.pantry-planner.api.controller

import com.tanacchi.pantry-planner.api.model.Model400ErrorMessage
import com.tanacchi.pantry-planner.api.model.Model404ErrorMessage
import com.tanacchi.pantry-planner.api.model.Model500ErrorMessage
import com.tanacchi.pantry-planner.api.model.User
import com.tanacchi.pantry-planner.api.model.UserDetail
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface UsersApi {

    @Operation(
        tags = ["User",],
        summary = "指定 LINE UID のユーザーの詳細を取得します",
        operationId = "usersByLineUidLineUidDetailGet",
        description = """ユーザーの LINE UID を指定して取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "ユーザーの取得に成功しました", content = [Content(schema = Schema(implementation = UserDetail::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users/by-line-uid/{lineUid}/detail"],
            produces = ["application/json"]
    )
    fun usersByLineUidLineUidDetailGet(@Parameter(description = "ユーザーの LINE UID", required = true) @PathVariable("lineUid") lineUid: kotlin.String): ResponseEntity<UserDetail> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "指定 LINE UID のユーザーを取得します",
        operationId = "usersByLineUidLineUidGet",
        description = """ユーザーの LINE UID を指定して取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "ユーザーの取得に成功しました", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users/by-line-uid/{lineUid}"],
            produces = ["application/json"]
    )
    fun usersByLineUidLineUidGet(@Parameter(description = "ユーザーの LINE UID", required = true) @PathVariable("lineUid") lineUid: kotlin.String): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "ユーザー一覧を取得します",
        operationId = "usersGet",
        description = """クエリパラメータで検索条件を指定してユーザーのリストを取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "ユーザー一覧の取得に成功しました", content = [Content(array = ArraySchema(schema = Schema(implementation = User::class)))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users"],
            produces = ["application/json"]
    )
    fun usersGet(): ResponseEntity<List<User>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "指定IDのユーザーを削除します",
        operationId = "usersIdDelete",
        description = """ユーザーを削除します。""",
        responses = [
            ApiResponse(responseCode = "204", description = "ユーザーの削除に成功しました"),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/users/{id}"],
            produces = ["application/json"]
    )
    fun usersIdDelete(@Parameter(description = "ユーザーID", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "指定IDのユーザーの詳細を取得します",
        operationId = "usersIdDetailGet",
        description = """ユーザーのプライマリキーであるIDを指定して取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "ユーザーの取得に成功しました", content = [Content(schema = Schema(implementation = UserDetail::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users/{id}/detail"],
            produces = ["application/json"]
    )
    fun usersIdDetailGet(@Parameter(description = "ユーザーID", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<UserDetail> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "指定IDのユーザーを取得します",
        operationId = "usersIdGet",
        description = """ユーザーのプライマリキーであるIDを指定して取得します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "ユーザーの取得に成功しました", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users/{id}"],
            produces = ["application/json"]
    )
    fun usersIdGet(@Parameter(description = "ユーザーID", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "指定IDのユーザー情報を更新します",
        operationId = "usersIdPut",
        description = """ユーザーの情報を更新します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "ユーザーの更新に成功しました", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "404", description = "リソースが見つかりません", content = [Content(schema = Schema(implementation = Model404ErrorMessage::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/users/{id}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun usersIdPut(@Parameter(description = "ユーザーID", required = true) @PathVariable("id") id: kotlin.Int,@Parameter(description = "", required = true) @Valid @RequestBody user: User): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "新しいユーザーを作成します",
        operationId = "usersPost",
        description = """createdAt, updatedAtはリクエストボディに含めずに作成してください。""",
        responses = [
            ApiResponse(responseCode = "201", description = "ユーザーの作成に成功しました", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "400", description = "不正なリクエスト", content = [Content(schema = Schema(implementation = Model400ErrorMessage::class))]),
            ApiResponse(responseCode = "500", description = "サーバーエラー", content = [Content(schema = Schema(implementation = Model500ErrorMessage::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/users"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun usersPost(@Parameter(description = "", required = true) @Valid @RequestBody user: User): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
