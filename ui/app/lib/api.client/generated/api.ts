/* tslint:disable */
/* eslint-disable */
/**
 * gomoking bff API
 * BFF
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateItemRequestDto
 */
export interface CreateItemRequestDto {
    /**
     * アイテム名
     * @type {string}
     * @memberof CreateItemRequestDto
     */
    'name': string;
    /**
     * カテゴリ
     * @type {string}
     * @memberof CreateItemRequestDto
     */
    'category': CreateItemRequestDtoCategoryEnum;
    /**
     * パントリーID
     * @type {number}
     * @memberof CreateItemRequestDto
     */
    'pantryId': number;
    /**
     * 数量
     * @type {number}
     * @memberof CreateItemRequestDto
     */
    'quantity': number;
    /**
     * 単位
     * @type {string}
     * @memberof CreateItemRequestDto
     */
    'unit': string;
    /**
     * 賞味期限
     * @type {object}
     * @memberof CreateItemRequestDto
     */
    'expiresAt'?: object | null;
}

export const CreateItemRequestDtoCategoryEnum = {
    Food: 'Food',
    Drink: 'Drink',
    Snack: 'Snack',
    Spice: 'Spice',
    Other: 'Other'
} as const;

export type CreateItemRequestDtoCategoryEnum = typeof CreateItemRequestDtoCategoryEnum[keyof typeof CreateItemRequestDtoCategoryEnum];

/**
 * 
 * @export
 * @interface CreatePantryRequestDto
 */
export interface CreatePantryRequestDto {
    /**
     * 所有者ユーザーID
     * @type {number}
     * @memberof CreatePantryRequestDto
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface CreateUserRequestDto
 */
export interface CreateUserRequestDto {
    /**
     * LINE UID
     * @type {string}
     * @memberof CreateUserRequestDto
     */
    'lineUid': string;
}
/**
 * 
 * @export
 * @interface ItemResponseDto
 */
export interface ItemResponseDto {
    /**
     * アイテムID
     * @type {number}
     * @memberof ItemResponseDto
     */
    'id': number;
    /**
     * アイテム名
     * @type {string}
     * @memberof ItemResponseDto
     */
    'name': string;
    /**
     * アイテムのカテゴリ
     * @type {string}
     * @memberof ItemResponseDto
     */
    'category': ItemResponseDtoCategoryEnum;
    /**
     * 所属パントリーID
     * @type {number}
     * @memberof ItemResponseDto
     */
    'pantryId': number;
    /**
     * 数量
     * @type {number}
     * @memberof ItemResponseDto
     */
    'quantity': number;
    /**
     * 単位
     * @type {string}
     * @memberof ItemResponseDto
     */
    'unit': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof ItemResponseDto
     */
    'createdAt': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ItemResponseDto
     */
    'updatedAt': string;
}

export const ItemResponseDtoCategoryEnum = {
    Food: 'Food',
    Drink: 'Drink',
    Snack: 'Snack',
    Spice: 'Spice',
    Other: 'Other'
} as const;

export type ItemResponseDtoCategoryEnum = typeof ItemResponseDtoCategoryEnum[keyof typeof ItemResponseDtoCategoryEnum];

/**
 * 
 * @export
 * @interface PantryDetailResponseDto
 */
export interface PantryDetailResponseDto {
    /**
     * パントリーID
     * @type {number}
     * @memberof PantryDetailResponseDto
     */
    'id': number;
    /**
     * ユーザーID
     * @type {number}
     * @memberof PantryDetailResponseDto
     */
    'userId': number;
    /**
     * 作成日時
     * @type {string}
     * @memberof PantryDetailResponseDto
     */
    'createdAt': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof PantryDetailResponseDto
     */
    'updatedAt': string;
    /**
     * このパントリーに属するアイテム一覧
     * @type {Array<ItemResponseDto>}
     * @memberof PantryDetailResponseDto
     */
    'items': Array<ItemResponseDto>;
}
/**
 * 
 * @export
 * @interface PantryResponseDto
 */
export interface PantryResponseDto {
    /**
     * パントリーID
     * @type {number}
     * @memberof PantryResponseDto
     */
    'id': number;
    /**
     * ユーザーID
     * @type {number}
     * @memberof PantryResponseDto
     */
    'userId': number;
    /**
     * 作成日時
     * @type {string}
     * @memberof PantryResponseDto
     */
    'createdAt': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof PantryResponseDto
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface UserDetailResponseDto
 */
export interface UserDetailResponseDto {
    /**
     * ユーザーID
     * @type {number}
     * @memberof UserDetailResponseDto
     */
    'id': number;
    /**
     * LINE UID
     * @type {string}
     * @memberof UserDetailResponseDto
     */
    'lineUid': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof UserDetailResponseDto
     */
    'createdAt': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof UserDetailResponseDto
     */
    'updatedAt': string;
    /**
     * 最終ログイン日時
     * @type {string}
     * @memberof UserDetailResponseDto
     */
    'lastLoginAt': string;
    /**
     * ユーザーに紐づくパントリー
     * @type {PantryDetailResponseDto}
     * @memberof UserDetailResponseDto
     */
    'pantry': PantryDetailResponseDto;
}
/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * ユーザーID
     * @type {number}
     * @memberof UserResponseDto
     */
    'id': number;
    /**
     * LINE UID
     * @type {string}
     * @memberof UserResponseDto
     */
    'lineUid': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof UserResponseDto
     */
    'createdAt': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof UserResponseDto
     */
    'updatedAt': string;
    /**
     * 最終ログイン日時
     * @type {string}
     * @memberof UserResponseDto
     */
    'lastLoginAt': string;
}

/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateItemRequestDto} createItemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerCreateItem: async (createItemRequestDto: CreateItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createItemRequestDto' is not null or undefined
            assertParamExists('itemControllerCreateItem', 'createItemRequestDto', createItemRequestDto)
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createItemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerDeleteItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemControllerDeleteItem', 'id', id)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemControllerGetItem', 'id', id)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetItems: async (name?: Array<string>, category?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (category) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pantryId パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetItemsByPantry: async (pantryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pantryId' is not null or undefined
            assertParamExists('itemControllerGetItemsByPantry', 'pantryId', pantryId)
            const localVarPath = `/items/by-pantry/{pantryId}`
                .replace(`{${"pantryId"}}`, encodeURIComponent(String(pantryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {CreateItemRequestDto} createItemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerUpdateItem: async (id: number, createItemRequestDto: CreateItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemControllerUpdateItem', 'id', id)
            // verify required parameter 'createItemRequestDto' is not null or undefined
            assertParamExists('itemControllerUpdateItem', 'createItemRequestDto', createItemRequestDto)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createItemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateItemRequestDto} createItemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerCreateItem(createItemRequestDto: CreateItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerCreateItem(createItemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemControllerCreateItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerDeleteItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerDeleteItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemControllerDeleteItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerGetItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerGetItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemControllerGetItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerGetItems(name?: Array<string>, category?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerGetItems(name, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemControllerGetItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} pantryId パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerGetItemsByPantry(pantryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerGetItemsByPantry(pantryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemControllerGetItemsByPantry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {CreateItemRequestDto} createItemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerUpdateItem(id: number, createItemRequestDto: CreateItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerUpdateItem(id, createItemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemControllerUpdateItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateItemRequestDto} createItemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerCreateItem(createItemRequestDto: CreateItemRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ItemResponseDto> {
            return localVarFp.itemControllerCreateItem(createItemRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerDeleteItem(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.itemControllerDeleteItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetItem(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ItemResponseDto> {
            return localVarFp.itemControllerGetItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetItems(name?: Array<string>, category?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<ItemResponseDto>> {
            return localVarFp.itemControllerGetItems(name, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pantryId パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetItemsByPantry(pantryId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ItemResponseDto>> {
            return localVarFp.itemControllerGetItemsByPantry(pantryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id アイテムID
         * @param {CreateItemRequestDto} createItemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerUpdateItem(id: number, createItemRequestDto: CreateItemRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ItemResponseDto> {
            return localVarFp.itemControllerUpdateItem(id, createItemRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 
     * @param {CreateItemRequestDto} createItemRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerCreateItem(createItemRequestDto: CreateItemRequestDto, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerCreateItem(createItemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id アイテムID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerDeleteItem(id: number, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerDeleteItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id アイテムID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerGetItem(id: number, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerGetItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [name] 
     * @param {Array<string>} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerGetItems(name?: Array<string>, category?: Array<string>, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerGetItems(name, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pantryId パントリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerGetItemsByPantry(pantryId: number, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerGetItemsByPantry(pantryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id アイテムID
     * @param {CreateItemRequestDto} createItemRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerUpdateItem(id: number, createItemRequestDto: CreateItemRequestDto, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerUpdateItem(id, createItemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PantryApi - axios parameter creator
 * @export
 */
export const PantryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePantryRequestDto} createPantryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerCreatePantry: async (createPantryRequestDto: CreatePantryRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPantryRequestDto' is not null or undefined
            assertParamExists('pantryControllerCreatePantry', 'createPantryRequestDto', createPantryRequestDto)
            const localVarPath = `/pantries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPantryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerDeletePantry: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pantryControllerDeletePantry', 'id', id)
            const localVarPath = `/pantries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pantries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantriesByUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('pantryControllerGetPantriesByUser', 'userId', userId)
            const localVarPath = `/pantries/by-user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantry: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pantryControllerGetPantry', 'id', id)
            const localVarPath = `/pantries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantryDetail: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pantryControllerGetPantryDetail', 'id', id)
            const localVarPath = `/pantries/{id}/detail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantryDetailsByUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('pantryControllerGetPantryDetailsByUser', 'userId', userId)
            const localVarPath = `/pantries/by-user/{userId}/detail`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {CreatePantryRequestDto} createPantryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerUpdatePantry: async (id: number, createPantryRequestDto: CreatePantryRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pantryControllerUpdatePantry', 'id', id)
            // verify required parameter 'createPantryRequestDto' is not null or undefined
            assertParamExists('pantryControllerUpdatePantry', 'createPantryRequestDto', createPantryRequestDto)
            const localVarPath = `/pantries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPantryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PantryApi - functional programming interface
 * @export
 */
export const PantryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PantryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePantryRequestDto} createPantryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerCreatePantry(createPantryRequestDto: CreatePantryRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PantryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerCreatePantry(createPantryRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerCreatePantry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerDeletePantry(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerDeletePantry(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerDeletePantry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerGetPantries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PantryResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerGetPantries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerGetPantries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerGetPantriesByUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PantryResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerGetPantriesByUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerGetPantriesByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerGetPantry(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PantryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerGetPantry(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerGetPantry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerGetPantryDetail(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PantryDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerGetPantryDetail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerGetPantryDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerGetPantryDetailsByUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PantryDetailResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerGetPantryDetailsByUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerGetPantryDetailsByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {CreatePantryRequestDto} createPantryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantryControllerUpdatePantry(id: number, createPantryRequestDto: CreatePantryRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PantryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantryControllerUpdatePantry(id, createPantryRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PantryApi.pantryControllerUpdatePantry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PantryApi - factory interface
 * @export
 */
export const PantryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PantryApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePantryRequestDto} createPantryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerCreatePantry(createPantryRequestDto: CreatePantryRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<PantryResponseDto> {
            return localVarFp.pantryControllerCreatePantry(createPantryRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerDeletePantry(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pantryControllerDeletePantry(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantries(options?: RawAxiosRequestConfig): AxiosPromise<Array<PantryResponseDto>> {
            return localVarFp.pantryControllerGetPantries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantriesByUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PantryResponseDto>> {
            return localVarFp.pantryControllerGetPantriesByUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantry(id: number, options?: RawAxiosRequestConfig): AxiosPromise<PantryResponseDto> {
            return localVarFp.pantryControllerGetPantry(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantryDetail(id: number, options?: RawAxiosRequestConfig): AxiosPromise<PantryDetailResponseDto> {
            return localVarFp.pantryControllerGetPantryDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerGetPantryDetailsByUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PantryDetailResponseDto>> {
            return localVarFp.pantryControllerGetPantryDetailsByUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id パントリーID
         * @param {CreatePantryRequestDto} createPantryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantryControllerUpdatePantry(id: number, createPantryRequestDto: CreatePantryRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<PantryResponseDto> {
            return localVarFp.pantryControllerUpdatePantry(id, createPantryRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PantryApi - object-oriented interface
 * @export
 * @class PantryApi
 * @extends {BaseAPI}
 */
export class PantryApi extends BaseAPI {
    /**
     * 
     * @param {CreatePantryRequestDto} createPantryRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerCreatePantry(createPantryRequestDto: CreatePantryRequestDto, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerCreatePantry(createPantryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id パントリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerDeletePantry(id: number, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerDeletePantry(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerGetPantries(options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerGetPantries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerGetPantriesByUser(userId: number, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerGetPantriesByUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id パントリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerGetPantry(id: number, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerGetPantry(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id パントリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerGetPantryDetail(id: number, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerGetPantryDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerGetPantryDetailsByUser(userId: number, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerGetPantryDetailsByUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id パントリーID
     * @param {CreatePantryRequestDto} createPantryRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PantryApi
     */
    public pantryControllerUpdatePantry(id: number, createPantryRequestDto: CreatePantryRequestDto, options?: RawAxiosRequestConfig) {
        return PantryApiFp(this.configuration).pantryControllerUpdatePantry(id, createPantryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser: async (createUserRequestDto: CreateUserRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequestDto' is not null or undefined
            assertParamExists('userControllerCreateUser', 'createUserRequestDto', createUserRequestDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerDeleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerGetUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineUid LINE UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserByLineUid: async (lineUid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineUid' is not null or undefined
            assertParamExists('userControllerGetUserByLineUid', 'lineUid', lineUid)
            const localVarPath = `/users/by-line-uid/{lineUid}`
                .replace(`{${"lineUid"}}`, encodeURIComponent(String(lineUid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserDetail: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerGetUserDetail', 'id', id)
            const localVarPath = `/users/{id}/detail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineUid LINE UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserDetailByLineUid: async (lineUid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineUid' is not null or undefined
            assertParamExists('userControllerGetUserDetailByLineUid', 'lineUid', lineUid)
            const localVarPath = `/users/by-line-uid/{lineUid}/detail`
                .replace(`{${"lineUid"}}`, encodeURIComponent(String(lineUid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateUser: async (id: number, createUserRequestDto: CreateUserRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdateUser', 'id', id)
            // verify required parameter 'createUserRequestDto' is not null or undefined
            assertParamExists('userControllerUpdateUser', 'createUserRequestDto', createUserRequestDto)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreateUser(createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreateUser(createUserRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerCreateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerDeleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} lineUid LINE UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUserByLineUid(lineUid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUserByLineUid(lineUid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetUserByLineUid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUserDetail(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUserDetail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetUserDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} lineUid LINE UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUserDetailByLineUid(lineUid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUserDetailByLineUid(lineUid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetUserDetailByLineUid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateUser(id: number, createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateUser(id, createUserRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser(createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.userControllerCreateUser(createUserRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDeleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.userControllerGetUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} lineUid LINE UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserByLineUid(lineUid: string, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.userControllerGetUserByLineUid(lineUid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserDetail(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDetailResponseDto> {
            return localVarFp.userControllerGetUserDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} lineUid LINE UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserDetailByLineUid(lineUid: string, options?: RawAxiosRequestConfig): AxiosPromise<UserDetailResponseDto> {
            return localVarFp.userControllerGetUserDetailByLineUid(lineUid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponseDto>> {
            return localVarFp.userControllerGetUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id ユーザーID
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateUser(id: number, createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.userControllerUpdateUser(id, createUserRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserRequestDto} createUserRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerCreateUser(createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerCreateUser(createUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerDeleteUser(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerDeleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUser(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} lineUid LINE UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUserByLineUid(lineUid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetUserByLineUid(lineUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUserDetail(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetUserDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} lineUid LINE UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUserDetailByLineUid(lineUid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetUserDetailByLineUid(lineUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUsers(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id ユーザーID
     * @param {CreateUserRequestDto} createUserRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdateUser(id: number, createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdateUser(id, createUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



