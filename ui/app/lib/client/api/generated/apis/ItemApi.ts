/* tslint:disable */
/* eslint-disable */
/**
 * gomoking bff API
 * BFF
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateItemRequestDto,
  ItemResponseDto,
} from '../models/index';
import {
    CreateItemRequestDtoFromJSON,
    CreateItemRequestDtoToJSON,
    ItemResponseDtoFromJSON,
    ItemResponseDtoToJSON,
} from '../models/index';

export interface ItemControllerCreateItemRequest {
    createItemRequestDto: CreateItemRequestDto;
}

export interface ItemControllerDeleteItemRequest {
    id: number;
}

export interface ItemControllerGetItemRequest {
    id: number;
}

export interface ItemControllerGetItemsRequest {
    name?: Array<string>;
    category?: Array<string>;
}

export interface ItemControllerGetItemsByPantryRequest {
    pantryId: number;
}

export interface ItemControllerUpdateItemRequest {
    id: number;
    createItemRequestDto: CreateItemRequestDto;
}

/**
 * 
 */
export class ItemApi extends runtime.BaseAPI {

    /**
     */
    async itemControllerCreateItemRaw(requestParameters: ItemControllerCreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponseDto>> {
        if (requestParameters['createItemRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createItemRequestDto',
                'Required parameter "createItemRequestDto" was null or undefined when calling itemControllerCreateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateItemRequestDtoToJSON(requestParameters['createItemRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async itemControllerCreateItem(requestParameters: ItemControllerCreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponseDto> {
        const response = await this.itemControllerCreateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemControllerDeleteItemRaw(requestParameters: ItemControllerDeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemControllerDeleteItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async itemControllerDeleteItem(requestParameters: ItemControllerDeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itemControllerDeleteItemRaw(requestParameters, initOverrides);
    }

    /**
     */
    async itemControllerGetItemRaw(requestParameters: ItemControllerGetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemControllerGetItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async itemControllerGetItem(requestParameters: ItemControllerGetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponseDto> {
        const response = await this.itemControllerGetItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemControllerGetItemsRaw(requestParameters: ItemControllerGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ItemResponseDto>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemResponseDtoFromJSON));
    }

    /**
     */
    async itemControllerGetItems(requestParameters: ItemControllerGetItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ItemResponseDto>> {
        const response = await this.itemControllerGetItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemControllerGetItemsByPantryRaw(requestParameters: ItemControllerGetItemsByPantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ItemResponseDto>>> {
        if (requestParameters['pantryId'] == null) {
            throw new runtime.RequiredError(
                'pantryId',
                'Required parameter "pantryId" was null or undefined when calling itemControllerGetItemsByPantry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/by-pantry/{pantryId}`.replace(`{${"pantryId"}}`, encodeURIComponent(String(requestParameters['pantryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemResponseDtoFromJSON));
    }

    /**
     */
    async itemControllerGetItemsByPantry(requestParameters: ItemControllerGetItemsByPantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ItemResponseDto>> {
        const response = await this.itemControllerGetItemsByPantryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemControllerUpdateItemRaw(requestParameters: ItemControllerUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemControllerUpdateItem().'
            );
        }

        if (requestParameters['createItemRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createItemRequestDto',
                'Required parameter "createItemRequestDto" was null or undefined when calling itemControllerUpdateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateItemRequestDtoToJSON(requestParameters['createItemRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async itemControllerUpdateItem(requestParameters: ItemControllerUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponseDto> {
        const response = await this.itemControllerUpdateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
