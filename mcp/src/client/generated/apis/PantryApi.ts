/* tslint:disable */
/* eslint-disable */
/**
 * gomoking bff API
 * BFF
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePantryRequestDto,
  PantryDetailResponseDto,
  PantryResponseDto,
} from '../models/index';
import {
    CreatePantryRequestDtoFromJSON,
    CreatePantryRequestDtoToJSON,
    PantryDetailResponseDtoFromJSON,
    PantryDetailResponseDtoToJSON,
    PantryResponseDtoFromJSON,
    PantryResponseDtoToJSON,
} from '../models/index';

export interface PantryControllerCreatePantryRequest {
    createPantryRequestDto: CreatePantryRequestDto;
}

export interface PantryControllerDeletePantryRequest {
    id: number;
}

export interface PantryControllerGetPantriesByUserRequest {
    userId: number;
}

export interface PantryControllerGetPantryRequest {
    id: number;
}

export interface PantryControllerGetPantryDetailRequest {
    id: number;
}

export interface PantryControllerGetPantryDetailsByUserRequest {
    userId: number;
}

export interface PantryControllerUpdatePantryRequest {
    id: number;
    createPantryRequestDto: CreatePantryRequestDto;
}

/**
 * 
 */
export class PantryApi extends runtime.BaseAPI {

    /**
     */
    async pantryControllerCreatePantryRaw(requestParameters: PantryControllerCreatePantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PantryResponseDto>> {
        if (requestParameters['createPantryRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createPantryRequestDto',
                'Required parameter "createPantryRequestDto" was null or undefined when calling pantryControllerCreatePantry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pantries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePantryRequestDtoToJSON(requestParameters['createPantryRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PantryResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async pantryControllerCreatePantry(requestParameters: PantryControllerCreatePantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PantryResponseDto> {
        const response = await this.pantryControllerCreatePantryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pantryControllerDeletePantryRaw(requestParameters: PantryControllerDeletePantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pantryControllerDeletePantry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pantries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pantryControllerDeletePantry(requestParameters: PantryControllerDeletePantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pantryControllerDeletePantryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pantryControllerGetPantriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PantryResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pantries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PantryResponseDtoFromJSON));
    }

    /**
     */
    async pantryControllerGetPantries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PantryResponseDto>> {
        const response = await this.pantryControllerGetPantriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pantryControllerGetPantriesByUserRaw(requestParameters: PantryControllerGetPantriesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PantryResponseDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling pantryControllerGetPantriesByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pantries/by-user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PantryResponseDtoFromJSON));
    }

    /**
     */
    async pantryControllerGetPantriesByUser(requestParameters: PantryControllerGetPantriesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PantryResponseDto>> {
        const response = await this.pantryControllerGetPantriesByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pantryControllerGetPantryRaw(requestParameters: PantryControllerGetPantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PantryResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pantryControllerGetPantry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pantries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PantryResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async pantryControllerGetPantry(requestParameters: PantryControllerGetPantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PantryResponseDto> {
        const response = await this.pantryControllerGetPantryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pantryControllerGetPantryDetailRaw(requestParameters: PantryControllerGetPantryDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PantryDetailResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pantryControllerGetPantryDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pantries/{id}/detail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PantryDetailResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async pantryControllerGetPantryDetail(requestParameters: PantryControllerGetPantryDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PantryDetailResponseDto> {
        const response = await this.pantryControllerGetPantryDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pantryControllerGetPantryDetailsByUserRaw(requestParameters: PantryControllerGetPantryDetailsByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PantryDetailResponseDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling pantryControllerGetPantryDetailsByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pantries/by-user/{userId}/detail`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PantryDetailResponseDtoFromJSON));
    }

    /**
     */
    async pantryControllerGetPantryDetailsByUser(requestParameters: PantryControllerGetPantryDetailsByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PantryDetailResponseDto>> {
        const response = await this.pantryControllerGetPantryDetailsByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pantryControllerUpdatePantryRaw(requestParameters: PantryControllerUpdatePantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PantryResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pantryControllerUpdatePantry().'
            );
        }

        if (requestParameters['createPantryRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createPantryRequestDto',
                'Required parameter "createPantryRequestDto" was null or undefined when calling pantryControllerUpdatePantry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pantries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePantryRequestDtoToJSON(requestParameters['createPantryRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PantryResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async pantryControllerUpdatePantry(requestParameters: PantryControllerUpdatePantryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PantryResponseDto> {
        const response = await this.pantryControllerUpdatePantryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
