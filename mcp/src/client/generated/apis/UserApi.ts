/* tslint:disable */
/* eslint-disable */
/**
 * gomoking bff API
 * BFF
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserRequestDto,
  UserDetailResponseDto,
  UserResponseDto,
} from '../models/index';
import {
    CreateUserRequestDtoFromJSON,
    CreateUserRequestDtoToJSON,
    UserDetailResponseDtoFromJSON,
    UserDetailResponseDtoToJSON,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
} from '../models/index';

export interface UserControllerCreateUserRequest {
    createUserRequestDto: CreateUserRequestDto;
}

export interface UserControllerDeleteUserRequest {
    id: number;
}

export interface UserControllerGetUserRequest {
    id: number;
}

export interface UserControllerGetUserByLineUidRequest {
    lineUid: string;
}

export interface UserControllerGetUserDetailRequest {
    id: number;
}

export interface UserControllerGetUserDetailByLineUidRequest {
    lineUid: string;
}

export interface UserControllerUpdateUserRequest {
    id: number;
    createUserRequestDto: CreateUserRequestDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async userControllerCreateUserRaw(requestParameters: UserControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailResponseDto>> {
        if (requestParameters['createUserRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createUserRequestDto',
                'Required parameter "createUserRequestDto" was null or undefined when calling userControllerCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestDtoToJSON(requestParameters['createUserRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerCreateUser(requestParameters: UserControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailResponseDto> {
        const response = await this.userControllerCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerDeleteUserRaw(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerDeleteUser(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerGetUserRaw(requestParameters: UserControllerGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerGetUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUser(requestParameters: UserControllerGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUserByLineUidRaw(requestParameters: UserControllerGetUserByLineUidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['lineUid'] == null) {
            throw new runtime.RequiredError(
                'lineUid',
                'Required parameter "lineUid" was null or undefined when calling userControllerGetUserByLineUid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/by-line-uid/{lineUid}`.replace(`{${"lineUid"}}`, encodeURIComponent(String(requestParameters['lineUid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUserByLineUid(requestParameters: UserControllerGetUserByLineUidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerGetUserByLineUidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUserDetailRaw(requestParameters: UserControllerGetUserDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerGetUserDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}/detail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUserDetail(requestParameters: UserControllerGetUserDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailResponseDto> {
        const response = await this.userControllerGetUserDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUserDetailByLineUidRaw(requestParameters: UserControllerGetUserDetailByLineUidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailResponseDto>> {
        if (requestParameters['lineUid'] == null) {
            throw new runtime.RequiredError(
                'lineUid',
                'Required parameter "lineUid" was null or undefined when calling userControllerGetUserDetailByLineUid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/by-line-uid/{lineUid}/detail`.replace(`{${"lineUid"}}`, encodeURIComponent(String(requestParameters['lineUid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUserDetailByLineUid(requestParameters: UserControllerGetUserDetailByLineUidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailResponseDto> {
        const response = await this.userControllerGetUserDetailByLineUidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseDtoFromJSON));
    }

    /**
     */
    async userControllerGetUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponseDto>> {
        const response = await this.userControllerGetUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerUpdateUserRaw(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerUpdateUser().'
            );
        }

        if (requestParameters['createUserRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createUserRequestDto',
                'Required parameter "createUserRequestDto" was null or undefined when calling userControllerUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestDtoToJSON(requestParameters['createUserRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerUpdateUser(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
